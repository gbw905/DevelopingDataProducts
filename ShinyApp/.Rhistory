glm(use ~ factor(stability)+factor(error)+ factor(sign)+ factor(wind)+ factor(magn)+ factor(vis), data=myshuttle)
glm(use ~ factor(stability)+factor(error)+ factor(sign)+ factor(wind)+ factor(magn)+ factor(vis), data=myshuttle, family="binomial")
glm(use ~ factor(wind), data=myshuttle, family="binomial")
myshuttle<-shuttle[c(1:253),]
?transform
transform(myshuttle, use = if(myShuttle$use == "auto", 1, 0))
?if
transform(myshuttle, use = if(myShuttle$use == "auto"){1,0})
transform(myshuttle, use = if(myShuttle$use == "auto"){1}else{0})
transform(myshuttle, use = if(use == "auto"){1}else{0})
glm(use ~ factor(wind), data=myshuttle, family="binomial")
glm(use ~ wind, data=myshuttle, family="binomial")
transform(myshuttle, headwind = if(wind == "head"){1}else{0})
View(myshuttle)
View(myshuttle)
View(myshuttle)
View(myshuttle)
glm(use ~ factor(wind), data=myshuttle, family="binomial")
?factor
glm(use ~ factor(wind, levels=c("headwind, tailwind")), data=myshuttle, family="binomial")
glm(use ~ factor(wind, levels=2, data=myshuttle, family="binomial")
glm(use ~ factor(wind, levels=2), data=myshuttle, family="binomial")
myshuttle1 <- myshuttle[wind=="head", 4]
myshuttle1 <- myshuttle$wind
myshuttle1
myshuttle1 <- myshuttle$wind == "head"
View(myshuttle1)
bind(myshuttle, myshuttle1)
?bind
cbind(myshuttle, myshuttle1)
str(myshuttle)
view(myshuttle)
View(myshuttle)
transform(myshuttle, use = if(use == "auto"){1} else {0})
View(myshuttle)
myshuttle<-transform(myshuttle, use = if(use == "auto"){1} else {0})
View(myshuttle)
remove(myshuttle1)
headwind<-myshuttle$wind == "head"
cbind(myshuttle, headwind)
myshuttle<-cbind(myshuttle, headwind)
View(myshuttle)
tailwind<-myshuttle$wind == "tail"
glm(use ~ headwind, data=myshuttle, family="binomial")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/ravensData.rda", destfile="./ravensData.rda", method="curl")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/ravensData.rda", destfile="./data/ravensData.rda", method="curl")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/ravensData.rda"
, destfile="./data/ravensData.rda",method="curl")
load("./data/ravensData.rda")
head(ravensData)
lmRavens <- lm(ravensData$ravenWinNum ~ ravensData$ravenScore)
summary(lmRavens)$coef
x <- seq(-10, 10, lenght = 1000)
x <- seq(-10, 10, length = 1000)
manipulate(
plot(x, exp(beta0 + beta1 * x) / (1 + exp(beta0 +  beta1 * x)),
type = "l", lwd=3, frame=FALSE),
beta1 = slider(-2,2,step=.1, initial=2),
beta0 = slider(-2,2,step=.1, initial=0)
)
library(manipulate)
x <- seq(-10, 10, length = 1000)
manipulate(
plot(x, exp(beta0 + beta1 * x) / (1 + exp(beta0 +  beta1 * x)),
type = "l", lwd=3, frame=FALSE),
beta1 = slider(-2,2,step=.1, initial=2),
beta0 = slider(-2,2,step=.1, initial=0)
)
logRegRavens <- glm(ravensData$ravenWinNum ~ ravensData$ravenScore, family="binomial")
summary(logRegRavens)
plot(ravensData$ravenScore, logRegRavens$fitted,pch=19,col="blue",xlab="score",ylab="por Ravens win")
exp(logRegRavens$coeff)
exp(confint(logRegRavens))
anova(logRegRavens,test="Chisq")
glm(use ~ headwind, data=myshuttle, family="binomial")
glmShut<-glm(use ~ headwind, data=myshuttle, family="binomial")
glmShut$coefficient[1]
glmShut$coefficient[2]
glmShut$coefficient[1] + glmShut$coefficient[2]
glmShut$coefficient[1]*1 + glmShut$coefficient[2]*1
e(glmShut$coefficient[1]*1 + glmShut$coefficient[2]*1)
exp(glmShut$coefficient[1]*1 + glmShut$coefficient[2]*1)
log(glmShut$coefficient[1]*1 + glmShut$coefficient[2]*1)
myshuttle <- shuttle[c(1:253),]
autolander<- myshuttle$use == "auto"
headwind<- myshuttle$wind == "head"
glmshut <- glm(autolander ~ headwind, family="binomial")
glmshut
glmshut$coefficients[0]
glmshut$coefficients[1]
glmshut$coefficients[2]
glmshut$coefficients[2]+glmshut$coefficients[2]
exp(glmshut$coefficients[2]+glmshut$coefficients[2])
glmshut$coefficients[2]+glmshut$coefficients[2]
0.28313 + 0.02325
exp(0.28313 + 0.02325)
View(myshuttle)
glmshut <- glm(autolander ~ headwind + factor(myshuttle$magn), family="binomial")
summary(glmshut)
4.060e-01 + 2.585e-02
exp(4.060e-01 + 2.585e-02)
glmshut <- glm(autolander ~ headwind + factor(myshuttle$magn) -1, family="binomial")
summary(glmshut)
glmshut <- glm(autolander ~ headwind + factor(myshuttle$magn) (autlander - 1), family="binomial")
glmshut <- glm(autolander ~ headwind + factor(myshuttle$magn), family="binomial")
fake<- autolander - 1
fake
glmshut <- glm(autolander ~ headwind + factor(myshuttle$magn) + fake, family="binomial")
summary(glmshut)
data(InsectSprays)
data(InsectSprays)
str(InsectSprays)
glm(count ~ factor(spray), family = "poisson")
glm(InsectSprays$count ~ factor(InsectSprays$spray), family = "poisson")
glmspray<-glm(InsectSprays$count ~ factor(InsectSprays$spray), family = "poisson")
Spray<-factor(InsectSprays$spray)
View(Spray)
A<-Spray=="A"
B<-Spray=="B"
glmspray<-glm(InsectSprays$count ~ A + B, family = "poisson")
summary(glmspray)
glmspray1<-glm(InsectSprays$count ~ factor(InsectSprays$spray), family = "poisson")
summary(glmspray1)
glmspray1<-glm(InsectSprays$count ~ factor(InsectSprays$spray) - 1, family = "poisson")
summary(glmspray1)
summary(glmspray1)$coef
summary(glmspray1)$coef[1]
summary(glmspray1)$coef[1]/summary(glmspray1)$coef[2]
exp(summary(glmspray1)$coef[1]/summary(glmspray1)$coef[2])
summary(glmspray1)$coef[1]/summary(glmspray1)$coef[2]
log(summary(glmspray1)$coef[1]/summary(glmspray1)$coef[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
n<-500
x<-seq(0,4*pi, lenght=n)
x<-seq(0,4*pi, length=n)
y<-sin(x)+rnorm(n,sd=3)
knots<-seq(0,8*pi,length=20)
splineTerms<-sapply(snotes,function(knot)(x>knot)*(x-knot))
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)
yhat<-predict(lm(y~xMat -1))
plot(x,y,frame=FALSE,pch=21,bg="lightblue", cex=2)
lines(x,yhat,col="red",lwd=2)
y<-sin(x)+rnorm(n,sd=.3)
knots<-seq(0,8*pi,length=20)
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)
yhat<-predict(lm(y~xMat -1))
plot(x,y,frame=FALSE,pch=21,bg="lightblue", cex=2)
lines(x,yhat,col="red",lwd=2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
lines(x, py)
py
plot(gb)
plot(predict(gb,x))
?predict
predict.lm(gb, newdata=x)
predict.lm(gb, data=x)
plot(predict.lm(gb, data=x))
library(MASS)
data(shuttle)
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels=c(1,0))
fit1 <- glm(use ~ wind -1, data = shuttle, family = "binomial")
summary(fit1)
windhead<-fit1$coef[1]
windtail<-fit1$codf[2]
exp(windtail)/exp(windhead)
windtail<-fit1$coef[2]
exp(windtail)/exp(windhead)
library(MASS)
data(shuttle)
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windtail2)/exp(windhead2)
library(MASS)
data(shuttle)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit1)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
data(mtcars)
fit1 <- glm(mpg ~ factor(cyl), family="poisson", data = mtcars)
warnings()
fit1 <- glm(mpg ~ cyl, data = mtcars)
fit2 <- glm(mpg ~ cyl, family="poisson", data = mtcars)
warnings()
fit1 <- glm(mpg ~ cyl, family="poisson", data = mtcars)
fit2 <- glm(mpg ~ cyl + offset(10), family="poisson", data = mtcars)
fit2 <- glm(mpg ~ cyl + 10, family="poisson", data = mtcars)
cyl2 <- mtcars$cyl + 10
fit2 <- glm(mpg ~ cyl2, family="poisson", data = mtcars)
summary(fit1)$coefficients
summary(fit2)$coefficients
source('C:/Users/Greg/Google Drive/G.Watson/R/RegressionModels_Quiz4_work.R')
?STEP
?lm
?glm
?stepwise
install.packages("stepwise")
?step
install.packages("caret")
install.packages("caretEnsemble")
install.packages(c("evaluate", "formatR", "gdata", "gplots", "gtools", "highr", "Hmisc", "jsonlite", "knitr", "manipulate", "markdown", "plyr", "Rcpp", "RCurl", "stringr"))
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
prediction <- ifelse(spam$your > 0.5, "spam", "nonspam")
table(prediction, spam$type)/length(spam$type)
library(kernlab)
data(spam)
set.seed(333)
smallSpan <- spam[sample(dim(spam)[1], size=10),]
spamLable <- (smallSpam$ytpe=="spam")*1 + 1
smallSpam <- spam[sample(dim(spam)[1], size=10),]
remove(smallSpan)
spamLable <- (smallSpam$ytpe=="spam")*1 + 1
spamLable <- (smallSpam$type=="spam")*1 + 1
plot(smallSpam$capitalAve, col=spamLabel)
spamLabel <- (smallSpam$type=="spam")*1 + 1
remove(spamLable)
plot(smallSpam$capitalAve, col=spamLabel)
library(kernlab)
data(spam)
set.seed(333)
smallSpam <- spam[sample(dim(spam)[1], size=10),]
spamLabel <- (smallSpam$type=="spam")*1 + 1
plot(smallSpam$capitalAve, col=spamLabel)
rule1 <- function(x){
prediction <- rep(NA, lenght(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.4] <- "nonspam"
prediction[(x >= 2.40 & x <= 2.45)] <- "spam"
prediction[(x > 2.45 & x <= 2.7)] <- "nonspam"
return(prediction)
}
table(rule1(smallSpam$capitalAve), smallSpam$type)
rule1 <- function(x){
prediction <- rep(NA, length(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.4] <- "nonspam"
prediction[(x >= 2.40 & x <= 2.45)] <- "spam"
prediction[(x > 2.45 & x <= 2.7)] <- "nonspam"
return(prediction)
}
table(rule1(smallSpam$capitalAve), smallSpam$type)
install.packages("shiny")
library(shiny)
library(shiny)
library(shiny)
shinyUI(bootstrapPage(
selectInput(inputId = "n_breaks",
label = "Number of bins in histogram (approximate):",
choices = c(10, 20, 35, 50),
selected = 20),
checkboxInput(inputId = "individual_obs",
label = strong("Show individual observations"),
value = FALSE),
checkboxInput(inputId = "density",
label = strong("Show density estimate"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
runExample("01_hello")
pwd
pwd()
getwd()
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1', display.mode="showcase")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
find_rtools("c:/rtools/")
?find_rtools
find_rtools()
find_rtools()
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages('base64enc')
install_github("ramnathv/rCharts@dev")
install.packages("base64enc")
install_github("ramnathv/rCharts@dev")
install_github('ramnathv/rMaps')
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
install.packages("rjson")
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
library(rMaps)
library(rjson)
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom=13)
map3$marker(c(51.5, -0.09), bindPopup="<p>Hi. I am a popup</p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p>Hi. I am another popup</p>")
map3$save('fig/map3.html', cdn = TRUE)
map3$save('fig/map3.html', cdn = TRUE)
cat('<iframe src="fig/map3.html" width=100%, height=600></iframe>')
install.packages("googleVis")
library(googleVis)
library(googlevis)
library(googleVis)
load(googleVis)
install.packages("googleVis")
library(googleVis)
suppressPackagesStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
install.packages(googleVis)
install.packages( googleVis )
install.packages("googleVis")
library(googleVis)
install_github("mages/googleVis")
library(googleVis)
data(fruits)
data(fruit)
data(Fruits)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width=600, height=400))
print(M, "chart")
print(M)
shinyapps::setAccountInfo(name='gregbwatson', token='E4C3B11E8E30A5943A8140C529208645', secret='juRx6n8IYRM12nxwbMgdlLr52SCh9SMvYPtpPkmK')
load(shinyapps)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='gregbwatson', token='E4C3B11E8E30A5943A8140C529208645', secret='juRx6n8IYRM12nxwbMgdlLr52SCh9SMvYPtpPkmK')
library(shinyapps)
install_github("ropensci/plotly")
library(plotly)
set_credentials_file("gbw905", "qpwap77y0t")
load("courseraData.rda")
library(manipulate)
data(mtcars)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
myPlot(5)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, List=FALSE)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain]
testing <- spam[-inTrain,]
training <- spam[inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~ ., data=training, method="glm")
install.packages("e1071")
modelFit <- train(type ~ ., data=training, method="glm")
warnings()
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(predictions, testing$type)
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds[[1]][1:10]
folds[[1]][1:10]
folds <- createFolds(y=spam$type,k=10,list=TRUE,returnTrain=FALSE)
sapply(folds,length)
folds[[1]][1:10]
modelFit<-train(type~.,data=training,method="glm")
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training);dim(testing)
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage, plot="pairs")
qplot(age, wage,data=training)
qplot(age, wage,data=training,color=jobclass)
qq <- qplot(age,wage,color=education,data=training)
qq + geom_smooth(method="lm",formula=y~x)
load(Hmisc)
install.packages("Hmisc")
load(Hmisc)
load(hmisc)
load(Hmisc)
install.packages("manipulate")
load(Hmisc)
install.packages("Hmisc")
load(Hmisc)
load("Hmisc")
load(Hmisc)
library(Hmisc,
lib.loc="~/R/")
library(Hmisc, lib.loc="~/R/")
install.packages("./Hmisc_3.6-1.tar.gz", lib="/Library/Frameworks/R.framework/Versions/2.11/Resources/library/", repos=NULL, dependencies=TRUE)
library('Slidify')
install_github('slidify', 'ramnathv'); install_githum('slidifyLibraries','ramnathv')
library(devtools)
install_github('slidify', 'ramnathv'); install_githum('slidifyLibraries','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
getwd()
setwd('./presentations')
getwd()
author(quiz2)
author("quiz2")
library(knitr)
slidify("index.Rmd*")
setwd("...\quiz2")
setwd(".../quiz2")
setwd("...//quiz2")
slidify("index.Rmd")
?presenter
?Rpres
cat('\014')
setwd("..\..")
setwd("..")
getwd()
setwd("..")
getwd()
cat('\014')
library(shiny)
runExample("01_hello")
setwd("./app-1")
runApp()
runApp(display.mode='showcase')
runApp(display.mode='showcase')
?switch
runApp()
runApp()
runApp()
runApp()
R -e "shiny::runApp('App-1')"
R -e "shiny::runApp('~/App-1')"
R -e "shiny::runApp('./App-1')"
R -e "shiny::runApp()"
"C:\Program Files\R\R-3.1.3\bin\R" -e "shiny::runApp('C:\\Users\\Greg\\Google Drive\\G.Watson\\R\\App-1')"
"C:\\Program Files\\R\\R-3.1.3\\bin\\R" -e "shiny::runApp('C:\\Users\\Greg\\Google Drive\\G.Watson\\R\\App-1')"
"R" -e "shiny::runApp('C:\\Users\\Greg\\Google Drive\\G.Watson\\R\\App-1')"
R
